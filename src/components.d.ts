/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface LazyCmp {
    /**
    * Name of component to be lazy loaded
    */
    'component'?: string;
    /**
    * Prop of component to be lazy loaded
    */
    'component-prop-?'?: string;
    /**
    * Props of component that will be lazy loaded
    */
    'componentProps'?: { [key: string]: any };
    /**
    * Value of event that will be thrown while lazy loading
    */
    'eventValue'?: string;
    /**
    * Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).  The values can be percentages
    */
    'margin'?: string;
  }
  interface LazyCmpAttributes extends StencilHTMLAttributes {
    /**
    * Name of component to be lazy loaded
    */
    'component'?: string;
    /**
    * Prop of component to be lazy loaded
    */
    'component-prop-?'?: string;
    /**
    * Props of component that will be lazy loaded
    */
    'componentProps'?: { [key: string]: any };
    /**
    * Value of event that will be thrown while lazy loading
    */
    'eventValue'?: string;
    /**
    * Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).  The values can be percentages
    */
    'margin'?: string;
    /**
    * Event that will be thrown while lazy loading. Will be thrown only if `eventValue` was passed
    */
    'onLoaded'?: (event: CustomEvent) => void;
  }

  interface LazyFetch {
    /**
    * Request body
    */
    'body'?: string;
    /**
    * Request header
    */
    'header-?'?: string;
    /**
    * Request headers
    */
    'headers'?: Headers;
    /**
    * Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).  The values can be percentages
    */
    'margin'?: string;
    /**
    * Http requst type: GET, POST, PUT, DELETE, PATCH
    */
    'method'?: string;
    /**
    * Request url
    */
    'url': string;
  }
  interface LazyFetchAttributes extends StencilHTMLAttributes {
    /**
    * Request body
    */
    'body'?: string;
    /**
    * Request header
    */
    'header-?'?: string;
    /**
    * Request headers
    */
    'headers'?: Headers;
    /**
    * Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).  The values can be percentages
    */
    'margin'?: string;
    /**
    * Http requst type: GET, POST, PUT, DELETE, PATCH
    */
    'method'?: string;
    /**
    * Thrown as a failed request callback. Carries response object
    */
    'onError'?: (event: CustomEvent) => void;
    /**
    * Thrown as a succesfull request callback. Carries response object
    */
    'onResolved'?: (event: CustomEvent) => void;
    /**
    * Request url
    */
    'url'?: string;
  }

  interface LazyHtml {
    /**
    * Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left). The values can be percentages
    */
    'margin'?: string;
    /**
    * Request url
    */
    'placeholder': string;
    /**
    * Request url
    */
    'url': string;
  }
  interface LazyHtmlAttributes extends StencilHTMLAttributes {
    /**
    * Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left). The values can be percentages
    */
    'margin'?: string;
    /**
    * Thrown as a failed request callback. Carries response object
    */
    'onError'?: (event: CustomEvent) => void;
    /**
    * Thrown as a succesfull request callback. Carries response object
    */
    'onResolved'?: (event: CustomEvent) => void;
    /**
    * Request url
    */
    'placeholder'?: string;
    /**
    * Request url
    */
    'url'?: string;
  }

  interface LazyImg {
    /**
    * Alternate text to be shown in case image cannot be displayed
    */
    'alt': string;
    /**
    * Source url of image to be shown in case error while loading src url
    */
    'fallbackSrc': string;
    /**
    * Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).  The values can be percentages
    */
    'margin'?: string;
    /**
    * Source url of image to be shown before lazy load
    */
    'placeholderSrc': string;
    /**
    * Source url of image to be lazy loaded
    */
    'src': string;
  }
  interface LazyImgAttributes extends StencilHTMLAttributes {
    /**
    * Alternate text to be shown in case image cannot be displayed
    */
    'alt'?: string;
    /**
    * Source url of image to be shown in case error while loading src url
    */
    'fallbackSrc'?: string;
    /**
    * Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).  The values can be percentages
    */
    'margin'?: string;
    /**
    * Source url of image to be shown before lazy load
    */
    'placeholderSrc'?: string;
    /**
    * Source url of image to be lazy loaded
    */
    'src'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'LazyCmp': Components.LazyCmp;
    'LazyFetch': Components.LazyFetch;
    'LazyHtml': Components.LazyHtml;
    'LazyImg': Components.LazyImg;
  }

  interface StencilIntrinsicElements {
    'lazy-cmp': Components.LazyCmpAttributes;
    'lazy-fetch': Components.LazyFetchAttributes;
    'lazy-html': Components.LazyHtmlAttributes;
    'lazy-img': Components.LazyImgAttributes;
  }


  interface HTMLLazyCmpElement extends Components.LazyCmp, HTMLStencilElement {}
  var HTMLLazyCmpElement: {
    prototype: HTMLLazyCmpElement;
    new (): HTMLLazyCmpElement;
  };

  interface HTMLLazyFetchElement extends Components.LazyFetch, HTMLStencilElement {}
  var HTMLLazyFetchElement: {
    prototype: HTMLLazyFetchElement;
    new (): HTMLLazyFetchElement;
  };

  interface HTMLLazyHtmlElement extends Components.LazyHtml, HTMLStencilElement {}
  var HTMLLazyHtmlElement: {
    prototype: HTMLLazyHtmlElement;
    new (): HTMLLazyHtmlElement;
  };

  interface HTMLLazyImgElement extends Components.LazyImg, HTMLStencilElement {}
  var HTMLLazyImgElement: {
    prototype: HTMLLazyImgElement;
    new (): HTMLLazyImgElement;
  };

  interface HTMLElementTagNameMap {
    'lazy-cmp': HTMLLazyCmpElement
    'lazy-fetch': HTMLLazyFetchElement
    'lazy-html': HTMLLazyHtmlElement
    'lazy-img': HTMLLazyImgElement
  }

  interface ElementTagNameMap {
    'lazy-cmp': HTMLLazyCmpElement;
    'lazy-fetch': HTMLLazyFetchElement;
    'lazy-html': HTMLLazyHtmlElement;
    'lazy-img': HTMLLazyImgElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
